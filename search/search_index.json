{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u0411\u0435\u043b\u043e\u0432 \u2013 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442 \u0418\u0422\u041c\u041e, 2024 \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#_1","text":"\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u0411\u0435\u043b\u043e\u0432 \u2013 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442 \u0418\u0422\u041c\u041e, 2024","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#_2","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435"},{"location":"lab1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161 \u0412 \u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0432\u044b\u0431\u043e\u0440\u0430 \u0440\u0435\u0436\u0438\u043c\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c \u0446\u0438\u043a\u043b\u0435 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u044f \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \"Hello, server!\" \u0442\u0435\u043a\u0441\u0442\u043e\u043c \"Hello, client!\" import socket def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 54001) server_socket.bind(server_address) print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439...\") while True: message, client_address = server_socket.recvfrom(1024) print(f\"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: {message.decode('utf-8')}\") reply = \"Hello, client\" server_socket.sendto(reply.encode('utf-8'), client_address) def start_client(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 54001) message = \"Hello, server\" client_socket.sendto(message.encode('utf-8'), server_address) reply, _ = client_socket.recvfrom(1024) print(f\"\u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {reply.decode('utf-8')}\") client_socket.close() if __name__ == \"__main__\": role = input(\"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0440\u0435\u0436\u0438\u043c (server/client): \").strip().lower() if role == 'server': start_server() elif role == 'client': start_client() else: print(\"\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0432\u044b\u0431\u043e\u0440. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 'server' \u0438\u043b\u0438 'client'.\") \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u0438\u043d\u044b \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b \u043f\u043e \u0434\u0432\u0443\u043c \u043a\u0430\u0442\u0435\u0442\u0430\u043c. import socket import math def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 54002) server_socket.bind(server_address) print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432...\") while True: message, client_address = server_socket.recvfrom(1024) a, b = map(float, message.decode('utf-8').split(',')) print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u043a\u0430\u0442\u0435\u0442\u044b: a={a}, b={b}\") c = math.sqrt(a ** 2 + b ** 2) print(f\"\u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u0430\u044f \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430: c={c}\") server_socket.sendto(str(c).encode('utf-8'), client_address) def start_client(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 54002) a = float(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430: \")) b = float(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430: \")) message = f\"{a},{b}\" client_socket.sendto(message.encode('utf-8'), server_address) reply, _ = client_socket.recvfrom(1024) print(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (\u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430): {reply.decode('utf-8')}\") client_socket.close() if __name__ == \"__main__\": role = input(\"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0440\u0435\u0436\u0438\u043c (server/client): \").strip().lower() if role == 'server': start_server() elif role == 'client': start_client() else: print(\"\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0432\u044b\u0431\u043e\u0440. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 'server' \u0438\u043b\u0438 'client'.\") \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b index.html \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket import socket import math def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 8080) server_socket.bind(server_address) print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432...\") while True: message, client_address = server_socket.recvfrom(1024) if message.decode('utf-8') == \"gimme index.html\": with open(\"index.html\") as f: server_socket.sendto(str(f.read()).encode('utf-8'), client_address) def start_client(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 8080) client_socket.sendto(\"gimme index.html\".encode('utf-8'), server_address) reply, _ = client_socket.recvfrom(1024) print(reply.decode('utf-8')) client_socket.close() if __name__ == \"__main__\": role = input(\"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0440\u0435\u0436\u0438\u043c (server/client): \").strip().lower() if role == 'server': start_server() elif role == 'client': start_client() else: print(\"\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0432\u044b\u0431\u043e\u0440. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 'server' \u0438\u043b\u0438 'client'.\") \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 import socket import threading SERVER_HOST = 'localhost' SERVER_PORT = 12345 clients = [] def handle_client(client_socket, client_address): print(f\"New connection: {client_address}\") clients.append(client_socket) try: while True: message = client_socket.recv(1024).decode('utf-8') if not message: break print(f\"{client_address} said: {message}\") broadcast_message(message, client_socket) except ConnectionResetError: print(f\"{client_address} disconnected\") finally: clients.remove(client_socket) client_socket.close() def broadcast_message(message, sender_socket): for client in clients: if client != sender_socket: try: client.send(message.encode('utf-8')) except: clients.remove(client) def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((SERVER_HOST, SERVER_PORT)) server_socket.listen(5) print(f\"Server started at {SERVER_HOST}:{SERVER_PORT}, waiting for clients...\") while True: client_socket, client_address = server_socket.accept() client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address)) client_thread.start() def start_client(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((SERVER_HOST, SERVER_PORT)) receive_thread = threading.Thread(target=receive_messages, args=(client_socket,)) receive_thread.start() try: while True: message = input(\"You: \") client_socket.send(message.encode('utf-8')) finally: client_socket.close() def receive_messages(client_socket): while True: try: message = client_socket.recv(1024).decode('utf-8') if not message: break print(f\"\\nNew message: {message}\") except: print(\"Connection closed...\") break if __name__ == \"__main__\": role = input(\"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0440\u0435\u0436\u0438\u043c (server/client): \").strip().lower() if role == 'server': start_server() elif role == 'client': start_client() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c. import socket from urllib.parse import urlparse, parse_qs class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.grades = {} def serve_forever(self): with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket: server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server_socket.bind((self.host, self.port)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {self.host}:{self.port}\") while True: client_socket, addr = server_socket.accept() with client_socket: print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {addr}\") self.serve_client(client_socket) def serve_client(self, client_socket): request_data = client_socket.recv(1024).decode('utf-8') if not request_data: return method, url, headers, body = self.parse_request(request_data) print(f\"\u041c\u0435\u0442\u043e\u0434: {method}, URL: {url}\") if method == \"GET\": self.handle_get(client_socket) elif method == \"POST\": self.handle_post(client_socket, body) def parse_request(self, request_data): request_lines = request_data.split(\"\\r\\n\") method, url, protocol = request_lines[0].split(\" \") headers = {} body = \"\" i = 1 while request_lines[i]: header_name, header_value = request_lines[i].split(\": \", 1) headers[header_name] = header_value i += 1 if \"Content-Length\" in headers: content_length = int(headers[\"Content-Length\"]) body = request_lines[-1][:content_length] return method, url, headers, body def handle_get(self, client_socket): response_body = open(\"index.html\", encoding=\"utf-8\").read() grades = (\"<table class='table'>\" \"<thead>\" \"<tr>\" \"<th scope='col'>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</th>\" \"<th scope='col'>\u041e\u0446\u0435\u043d\u043a\u0438</th>\" \"</tr>\" \"</thead><tbody>\") for subject, grade in self.grades.items(): grades += f\"<tr><td>{subject}</td><td>\" for _grade in grade: grades += f\"<span class='m-1 badge text-bg-success'>{_grade}</span>\" grades += \"</td></tr>\" if len(self.grades) == 0: grades += f\"<tr><td>\u0414\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043a\u0430 \u043d\u0435\u0442 :(</td><td></td></tr>\" grades += \"</tbody></table>\" response_body = response_body.replace(\"%GRADES%\", grades) self.send_response(client_socket, \"200 OK\", response_body) def handle_post(self, client_socket, body): params = parse_qs(body) subject = params.get('subject', [''])[0] grade = params.get('grade', [''])[0] if subject and grade: if subject in self.grades.keys(): self.grades[subject].append(grade) else: self.grades[subject] = [grade] self.handle_get(client_socket) else: self.send_response(client_socket, \"400 Bad Request\", \"\u041e\u0448\u0438\u0431\u043a\u0430: \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\") def send_response(self, client_socket, status, body): response = f\"HTTP/1.1 {status}\\r\\n\" response += \"Content-Type: text/html; charset=utf-8\\r\\n\" response += f\"Content-Length: {len(body.encode('utf-8'))}\\r\\n\" response += \"Connection: close\\r\\n\" response += \"\\r\\n\" response += body client_socket.sendall(response.encode('utf-8')) if __name__ == '__main__': host = 'localhost' port = 8080 server = MyHTTPServer(host, port) server.serve_forever()","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lab1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lab1/#no1_1","text":"\u0412 \u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0432\u044b\u0431\u043e\u0440\u0430 \u0440\u0435\u0436\u0438\u043c\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c \u0446\u0438\u043a\u043b\u0435 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u044f \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \"Hello, server!\" \u0442\u0435\u043a\u0441\u0442\u043e\u043c \"Hello, client!\" import socket def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 54001) server_socket.bind(server_address) print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439...\") while True: message, client_address = server_socket.recvfrom(1024) print(f\"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: {message.decode('utf-8')}\") reply = \"Hello, client\" server_socket.sendto(reply.encode('utf-8'), client_address) def start_client(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 54001) message = \"Hello, server\" client_socket.sendto(message.encode('utf-8'), server_address) reply, _ = client_socket.recvfrom(1024) print(f\"\u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {reply.decode('utf-8')}\") client_socket.close() if __name__ == \"__main__\": role = input(\"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0440\u0435\u0436\u0438\u043c (server/client): \").strip().lower() if role == 'server': start_server() elif role == 'client': start_client() else: print(\"\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0432\u044b\u0431\u043e\u0440. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 'server' \u0438\u043b\u0438 'client'.\")","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"lab1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u0438\u043d\u044b \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b \u043f\u043e \u0434\u0432\u0443\u043c \u043a\u0430\u0442\u0435\u0442\u0430\u043c. import socket import math def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 54002) server_socket.bind(server_address) print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432...\") while True: message, client_address = server_socket.recvfrom(1024) a, b = map(float, message.decode('utf-8').split(',')) print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u043a\u0430\u0442\u0435\u0442\u044b: a={a}, b={b}\") c = math.sqrt(a ** 2 + b ** 2) print(f\"\u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u0430\u044f \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430: c={c}\") server_socket.sendto(str(c).encode('utf-8'), client_address) def start_client(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 54002) a = float(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430: \")) b = float(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430: \")) message = f\"{a},{b}\" client_socket.sendto(message.encode('utf-8'), server_address) reply, _ = client_socket.recvfrom(1024) print(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (\u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430): {reply.decode('utf-8')}\") client_socket.close() if __name__ == \"__main__\": role = input(\"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0440\u0435\u0436\u0438\u043c (server/client): \").strip().lower() if role == 'server': start_server() elif role == 'client': start_client() else: print(\"\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0432\u044b\u0431\u043e\u0440. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 'server' \u0438\u043b\u0438 'client'.\")","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"lab1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b index.html \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket import socket import math def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 8080) server_socket.bind(server_address) print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432...\") while True: message, client_address = server_socket.recvfrom(1024) if message.decode('utf-8') == \"gimme index.html\": with open(\"index.html\") as f: server_socket.sendto(str(f.read()).encode('utf-8'), client_address) def start_client(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 8080) client_socket.sendto(\"gimme index.html\".encode('utf-8'), server_address) reply, _ = client_socket.recvfrom(1024) print(reply.decode('utf-8')) client_socket.close() if __name__ == \"__main__\": role = input(\"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0440\u0435\u0436\u0438\u043c (server/client): \").strip().lower() if role == 'server': start_server() elif role == 'client': start_client() else: print(\"\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0432\u044b\u0431\u043e\u0440. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 'server' \u0438\u043b\u0438 'client'.\")","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"lab1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 import socket import threading SERVER_HOST = 'localhost' SERVER_PORT = 12345 clients = [] def handle_client(client_socket, client_address): print(f\"New connection: {client_address}\") clients.append(client_socket) try: while True: message = client_socket.recv(1024).decode('utf-8') if not message: break print(f\"{client_address} said: {message}\") broadcast_message(message, client_socket) except ConnectionResetError: print(f\"{client_address} disconnected\") finally: clients.remove(client_socket) client_socket.close() def broadcast_message(message, sender_socket): for client in clients: if client != sender_socket: try: client.send(message.encode('utf-8')) except: clients.remove(client) def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((SERVER_HOST, SERVER_PORT)) server_socket.listen(5) print(f\"Server started at {SERVER_HOST}:{SERVER_PORT}, waiting for clients...\") while True: client_socket, client_address = server_socket.accept() client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address)) client_thread.start() def start_client(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((SERVER_HOST, SERVER_PORT)) receive_thread = threading.Thread(target=receive_messages, args=(client_socket,)) receive_thread.start() try: while True: message = input(\"You: \") client_socket.send(message.encode('utf-8')) finally: client_socket.close() def receive_messages(client_socket): while True: try: message = client_socket.recv(1024).decode('utf-8') if not message: break print(f\"\\nNew message: {message}\") except: print(\"Connection closed...\") break if __name__ == \"__main__\": role = input(\"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0440\u0435\u0436\u0438\u043c (server/client): \").strip().lower() if role == 'server': start_server() elif role == 'client': start_client()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164"},{"location":"lab1/#no5","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c. import socket from urllib.parse import urlparse, parse_qs class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.grades = {} def serve_forever(self): with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket: server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server_socket.bind((self.host, self.port)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {self.host}:{self.port}\") while True: client_socket, addr = server_socket.accept() with client_socket: print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {addr}\") self.serve_client(client_socket) def serve_client(self, client_socket): request_data = client_socket.recv(1024).decode('utf-8') if not request_data: return method, url, headers, body = self.parse_request(request_data) print(f\"\u041c\u0435\u0442\u043e\u0434: {method}, URL: {url}\") if method == \"GET\": self.handle_get(client_socket) elif method == \"POST\": self.handle_post(client_socket, body) def parse_request(self, request_data): request_lines = request_data.split(\"\\r\\n\") method, url, protocol = request_lines[0].split(\" \") headers = {} body = \"\" i = 1 while request_lines[i]: header_name, header_value = request_lines[i].split(\": \", 1) headers[header_name] = header_value i += 1 if \"Content-Length\" in headers: content_length = int(headers[\"Content-Length\"]) body = request_lines[-1][:content_length] return method, url, headers, body def handle_get(self, client_socket): response_body = open(\"index.html\", encoding=\"utf-8\").read() grades = (\"<table class='table'>\" \"<thead>\" \"<tr>\" \"<th scope='col'>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</th>\" \"<th scope='col'>\u041e\u0446\u0435\u043d\u043a\u0438</th>\" \"</tr>\" \"</thead><tbody>\") for subject, grade in self.grades.items(): grades += f\"<tr><td>{subject}</td><td>\" for _grade in grade: grades += f\"<span class='m-1 badge text-bg-success'>{_grade}</span>\" grades += \"</td></tr>\" if len(self.grades) == 0: grades += f\"<tr><td>\u0414\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043a\u0430 \u043d\u0435\u0442 :(</td><td></td></tr>\" grades += \"</tbody></table>\" response_body = response_body.replace(\"%GRADES%\", grades) self.send_response(client_socket, \"200 OK\", response_body) def handle_post(self, client_socket, body): params = parse_qs(body) subject = params.get('subject', [''])[0] grade = params.get('grade', [''])[0] if subject and grade: if subject in self.grades.keys(): self.grades[subject].append(grade) else: self.grades[subject] = [grade] self.handle_get(client_socket) else: self.send_response(client_socket, \"400 Bad Request\", \"\u041e\u0448\u0438\u0431\u043a\u0430: \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\") def send_response(self, client_socket, status, body): response = f\"HTTP/1.1 {status}\\r\\n\" response += \"Content-Type: text/html; charset=utf-8\\r\\n\" response += f\"Content-Length: {len(body.encode('utf-8'))}\\r\\n\" response += \"Connection: close\\r\\n\" response += \"\\r\\n\" response += body client_socket.sendall(response.encode('utf-8')) if __name__ == '__main__': host = 'localhost' port = 8080 server = MyHTTPServer(host, port) server.serve_forever()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"}]}